generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model users {
  id                        Int              @id @default(autoincrement())
  UserTypeID                Int
  FirstName                 String
  LastName                  String
  Password                  String
  Email                     String           @unique
  PhoneNumber               String           @unique
  Nationality               String
  CreatedOn                 DateTime         @default(now())
  ModifiedOn                DateTime         @updatedAt
  isActive                  Boolean          @default(true)
  test                      Int?
  test2                     Int?
  isEmailVerified           Boolean         @default(false)
  LastLoginDate             DateTime?
  LastKnownNotificationToken String?
  cars                      cars[]
  creditCards               creditCards[]
  customer                  customer?
  deleteRequests            deleteRequests[]
  processedUserDeletions    deleteRequests[] @relation("processedByUsers")
  currentUserDeleteRequests deleteRequests[] @relation("currentUserDeleteRequests")
  provider                  provider?
  uploadedFiles             uploadedFiles[]
  chatSessions              chatSessions[]
  userTypes                 userTypes        @relation(fields: [UserTypeID], references: [id], onDelete: Cascade)
  
  // Order Messages Relations
  sentOrderMessages         orderMessages[] @relation("SentOrderMessages")
  
  // Support Relations
  supportRequests           supportRequests[] @relation("UserSupportRequests")

  // Performance indexes
  @@index([FirstName, LastName])
  @@index([isActive])
}

model deleteRequests {
  id              Int       @id @default(autoincrement())
  UserID          Int
  DeletedBy       Int
  Comments        String?
  ProcessedOn     DateTime?
  IsProcessed     Boolean   @default(false)
  ProcessedBy     Int?
  CreatedOn       DateTime  @default(now())
  ModifiedOn      DateTime  @updatedAt
  deletedByUser   users     @relation(fields: [DeletedBy], references: [id])
  processedByUser users?    @relation("processedByUsers", fields: [ProcessedBy], references: [id])
  user            users     @relation("currentUserDeleteRequests", fields: [UserID], references: [id])
}

model customer {
  id     Int      @id @default(autoincrement())
  UserID Int      @unique
  users  users    @relation(fields: [UserID], references: [id], onDelete: Cascade)
  orders orders[]
}

model provider {
  id               Int                @id @default(autoincrement())
  UserID           Int                @unique
  CompanyName       String            
  CompanyRepresentativeMobileNumber String @default("0")
  ProviderEmiratesID String @default("0")
  orders           orders[]
  users            users              @relation(fields: [UserID], references: [id], onDelete: Cascade)
  providerServices providerServices[]

  @@index([UserID])
  @@index([CompanyName])
}

model additionalFees {
  id        Int      @id @default(autoincrement())
  FeeName   String   @unique
  FeePrice  Decimal  @default(0)
  CreatedOn DateTime @default(now())
}

model services {
  id                      Int                @id @default(autoincrement())
  ServiceName             String             @unique
  ServiceDescription      String
  ServiceIconLink         String
  IsActive                Boolean            @default(true)
  isAvailableForAutoSelect Boolean           @default(true)
  CreatedOn               DateTime           @default(now())
  ModifiedOn              DateTime           @updatedAt
  ModuleID                Int
  GradientID              Int?
  orderServices                   orderServices[]
  orderAmountStatements   orderAmountStatements[]
  packageServices         packageServices[]
  providerServices        providerServices[]
  colorGradiants          colorGradiants?    @relation(fields: [GradientID], references: [id], onDelete: Cascade)
  modules                 modules            @relation(fields: [ModuleID], references: [id], onDelete: Cascade)

  // Performance indexes
  @@index([IsActive, isAvailableForAutoSelect])
  @@index([ServiceName])
}

model orderRating {
  id        Int      @id @default(autoincrement())
  OrderID   Int @unique
  Rating    Decimal
  Feedback   String?
  isOrderCompleted Boolean @default(false)
  Notes   String?
  CreatedOn DateTime @default(now())
  order    orders   @relation(fields: [OrderID], references: [id], onDelete: Cascade)
}

model orders {
  id                       Int                        @id @default(autoincrement())
  PaymentMethodID          Int
  CustomerID               Int
  ProviderID               Int?
  OrderSubmissionType      OrderSubmissionType        @default(PROVIDER_SELECT)
  OrderTimeoutSeconds      Int                       @default(1800) // Default to 30 minutes
  OrderTotalAmount         Float
  OrderCreatedDate         DateTime                   @default(now())
  Longitude                Float
  Latitude                 Float
  AddressString            String
  PaymentIntentID          String?                    @unique
  AdditionalAddressData    Json?
  AdditionalNotes          String?
  ProviderNetProfit        Decimal
  orderAmountStatements    orderAmountStatements[]
  orderCreditCardsPurchase orderCreditCardsPurchase[]
  orderHistory             orderHistory[]
  orderServices            orderServices[]
  chatSessions             chatSessions[]
  customer                 customer                   @relation(fields: [CustomerID], references: [id], onDelete: Cascade)
  paymentMethods           paymentMethods             @relation(fields: [PaymentMethodID], references: [id], onDelete: Cascade)
  provider                 provider?                   @relation(fields: [ProviderID], references: [id], onDelete: Cascade)
  ratings                  orderRating?
  orderMessages            orderMessages[]
  
  // Support Relations
  supportRequests          supportRequests[] @relation("OrderSupportRequests")

  // Performance indexes
  @@index([CustomerID, OrderCreatedDate])
  @@index([ProviderID, OrderCreatedDate])
  @@index([id, ProviderID])
}

model orderServices {
  id                               Int                              @id @default(autoincrement())
  OrderID                          Int
  CarID                            Int
  CreatedOn                        DateTime?                        @default(now()) @db.Timestamptz(6)
  ProviderServiceBodyTypeID        Int?
  ServiceID                       Int?
  service                          services?                       @relation(fields: [ServiceID], references: [id], onDelete: Cascade)
  cars                             cars                             @relation(fields: [CarID], references: [id], onDelete: Cascade)
  orders                           orders                           @relation(fields: [OrderID], references: [id], onDelete: Cascade)
  providerServicesAllowedBodyTypes providerServicesAllowedBodyTypes? @relation(fields: [ProviderServiceBodyTypeID], references: [id], onDelete: Cascade)

  // Performance indexes
  @@index([OrderID, CarID])
  @@index([ServiceID])
  @@index([ProviderServiceBodyTypeID])
}

model orderCreditCardsPurchase {
  id          Int         @id @default(autoincrement())
  CardID      Int
  OrderID     Int
  TotalAmount Float
  CreatedOn   DateTime    @default(now())
  creditCards creditCards @relation(fields: [CardID], references: [id], onDelete: Cascade)
  orders      orders      @relation(fields: [OrderID], references: [id], onDelete: Cascade)
}

model creditCards {
  id                       Int                        @id @default(autoincrement())
  UserID                   Int
  CVC                      String
  CardNumber               String
  ExpiryDate               String
  IsActive                 Boolean                    @default(true)
  CreatedOn                DateTime                   @default(now())
  users                    users                      @relation(fields: [UserID], references: [id], onDelete: Cascade)
  orderCreditCardsPurchase orderCreditCardsPurchase[]
}

model paymentMethods {
  id                Int      @id @default(autoincrement())
  MethodName        String   @unique
  MethodDescription String
  CreatedOn         DateTime @default(now())
  isActive          Boolean  @default(true)
  orders            orders[]
}

model userTypes {
  id             Int      @id @default(autoincrement())
  TypeName       String   @unique
  CreatedOn      DateTime @default(now())
  AllowedClients String[]
  users          users[]
}

model modules {
  id                Int            @id @default(autoincrement())
  ModuleName        String         @unique
  ModuleDescription String
  ModuleIconLink    String
  CreatedOn         DateTime       @default(now())
  isActive          Boolean        @default(true)
  packages          packages[]
  services          services[]
  chatSessions      chatSessions[]
}

model providerServices {
  id                               Int                                @id @default(autoincrement())
  ProviderID                       Int?
  ServiceID                        Int?
  Pofeciency                       String?
  CreatedOn                        DateTime                           @default(now())
  Rating                           Decimal                            @default(0)
  isActive                         Boolean                            @default(true)
  provider                         provider?                          @relation(fields: [ProviderID], references: [id], onDelete: Cascade)
  services                         services?                          @relation(fields: [ServiceID], references: [id], onDelete: Cascade)
  providerServicesAllowedBodyTypes providerServicesAllowedBodyTypes[]

  @@unique([ProviderID, ServiceID])
  @@index([ProviderID])
  @@index([ServiceID])
  @@index([isActive])
  @@index([Rating])
  @@index([ProviderID, isActive])
  @@index([ServiceID, isActive])
}

model packages {
  id                   Int               @id @default(autoincrement())
  ModuleID             Int
  GradiantID           Int?
  PackageName          String
  PackageDescription   String
  PackagePrice         Float
  PackageOriginalPrice Float
  PackageIconLink      String
  CreatedOn            DateTime          @default(now())
  packageServices      packageServices[]
  colorGradiants       colorGradiants?   @relation(fields: [GradiantID], references: [id], onDelete: Cascade)
  modules              modules           @relation(fields: [ModuleID], references: [id], onDelete: Cascade)

  @@index([ModuleID])
  @@index([PackagePrice])
  @@index([ModuleID, PackagePrice])
}

model bodyTypes {
  id                               Int                                @id @default(autoincrement())
  TypeName                         String                             @unique
  cars                             cars[]
  providerServicesAllowedBodyTypes providerServicesAllowedBodyTypes[]
}

model providerServicesAllowedBodyTypes {
  id                    Int                     @id @default(autoincrement())
  ProviderServiceID     Int
  BodyTypeID            Int
  Price                 Decimal
  orderAmountStatements orderAmountStatements[]
  orderServices         orderServices[]
  bodyType              bodyTypes               @relation(fields: [BodyTypeID], references: [id], onDelete: Cascade)
  providerService       providerServices        @relation(fields: [ProviderServiceID], references: [id], onDelete: Cascade)

  @@unique([ProviderServiceID, BodyTypeID])
}

model cars {
  id            Int             @id @default(autoincrement())
  UserID        Int
  BodyTypeID    Int
  PlateNumber   String
  Color         String
  Manufacturer  String
  Model         String
  CreatedOn     DateTime        @default(now())
  ModifiedOn    DateTime        @updatedAt
  PlateCity     String?
  bodyTypes     bodyTypes       @relation(fields: [BodyTypeID], references: [id], onDelete: Cascade)
  users         users           @relation(fields: [UserID], references: [id], onDelete: Cascade)
  orderServices orderServices[]

  @@index([UserID])
  @@index([BodyTypeID])
  @@index([PlateNumber])
  @@index([UserID, BodyTypeID])
}

model colorGradiants {
  id                 Int        @id @default(autoincrement())
  ColorName          String     @unique
  ColorMainText      String
  ColorSecondaryText String
  ColorStart         String
  ColorEnd           String
  packages           packages[]
  services           services[]
}

model packageServices {
  PackageID Int
  ServiceID Int
  packages  packages @relation(fields: [PackageID], references: [id], onDelete: Cascade)
  services  services @relation(fields: [ServiceID], references: [id], onDelete: Cascade)

  @@id([PackageID, ServiceID])
}

model orderHistory {
  id                Int               @id @default(autoincrement())
  OrderID           Int
  HistoryItemID     Int
  Notes             String?
  CreatedOn         DateTime          @default(now())
  orderHistoryItems orderHistoryItems @relation(fields: [HistoryItemID], references: [id], onDelete: Cascade)
  orders            orders            @relation(fields: [OrderID], references: [id], onDelete: Cascade)
}

model orderHistoryItems {
  id           Int            @id @default(autoincrement())
  HistoryName  String         @unique
  orderHistory orderHistory[]
}

model attachmentTypes {
  id          Int           @id @default(autoincrement())
  TypeName    String        @unique
  attachments attachments[]
}

model attachments {
  id             Int             @id @default(autoincrement())
  TypeID         Int
  Name           String          @unique
  Description    String
  isActive       Boolean         @default(true)
  isRequired     Boolean        
  canUploadFromCamera Boolean
  canUploadFromGallery Boolean
  allowMultiple        Boolean @default(false)
  CreatedOn      DateTime        @default(now())
  attachmentType attachmentTypes @relation(fields: [TypeID], references: [id])
  uploadedFiles  uploadedFiles[]
}

model uploadedFiles {
  id           Int         @id @default(autoincrement())
  AttachmentID Int
  UserID       Int
  FileName     String      @unique
  AWSEtag      String?
  CreatedAt    DateTime    @default(now())
  UploadedAt   DateTime?
  JsonData     Json?
  attachment   attachments @relation(fields: [AttachmentID], references: [id])
  user         users       @relation(fields: [UserID], references: [id])
}

model constants {
  id                    Int                     @id @default(autoincrement())
  Value                 Decimal                 @default(0)
  Type                  ConstantType
  Label                 String
  CreatedAt             DateTime                @default(now())
  UpdatedAt             DateTime                @updatedAt
  Name                  String                  @unique
  isActive              Boolean                 @default(true)
  orderAmountStatements orderAmountStatements[]
}

model orderAmountStatements {
  id                               Int                               @id @default(autoincrement())
  OrderID                          Int
  RelatedConstantID                Int?
  RelatedProviderServiceID         Int?
  RelatedServiceID                Int?
  RelatedVoucherID               Int?
  Name                             String?
  Amount                           Decimal
  DiscountAmount                   Decimal?                     
  CreatedAt                        DateTime                          @default(now())
  voucher                          vouchers?                         @relation(fields: [RelatedVoucherID], references: [id])
  service                          services?                         @relation(fields: [RelatedServiceID], references: [id], onDelete: Cascade, onUpdate: NoAction)
  orders                           orders                            @relation(fields: [OrderID], references: [id], onDelete: Cascade, onUpdate: NoAction)
  constants                        constants?                        @relation(fields: [RelatedConstantID], references: [id], onDelete: Cascade, onUpdate: NoAction)
  providerServicesAllowedBodyTypes providerServicesAllowedBodyTypes? @relation(fields: [RelatedProviderServiceID], references: [id])
}

model vouchers {
  id          Int      @id @default(autoincrement())
  Label      String   
  Code       String   @unique
  DiscountPercentage   Decimal
  IsActive   Boolean  @default(true)
  CreatedAt  DateTime @default(now())
  UpdatedAt  DateTime @updatedAt
  ordersAmountStatements  orderAmountStatements[]
}

enum ConstantType {
  Amount
  Percentage
  Numeric
}

enum ChatMessageType {
  USER
  AI_AGENT
  SYSTEM
}

enum ChatSessionStatus {
  ACTIVE
  COMPLETED
  CANCELLED
  TRANSFERRED_TO_HUMAN
}

model chatSessions {
  id            Int               @id @default(autoincrement())
  UserID        Int
  Status        ChatSessionStatus @default(ACTIVE)
  StartedAt     DateTime          @default(now())
  EndedAt       DateTime?
  Context       Json?             // Store conversation context, user preferences, etc.
  OrderID       Int?              // If session results in an order
  ModuleID      Int?              // Service module they're interested in
  user          users             @relation(fields: [UserID], references: [id], onDelete: Cascade)
  order         orders?           @relation(fields: [OrderID], references: [id])
  module        modules?          @relation(fields: [ModuleID], references: [id])
  messages      chatMessages[]
}

model chatMessages {
  id          Int             @id @default(autoincrement())
  SessionID   Int
  MessageType ChatMessageType
  Content     String
  Metadata    Json?           // Store AI confidence, intent classification, etc.
  CreatedAt   DateTime        @default(now())
  session     chatSessions    @relation(fields: [SessionID], references: [id], onDelete: Cascade)
}

model aiAgentIntents {
  id              Int      @id @default(autoincrement())
  IntentName      String   @unique
  Description     String
  Keywords        String[] // Keywords that trigger this intent
  ResponseTemplate String  // Template response for this intent
  RequiresData    Boolean  @default(false) // Whether this intent needs to fetch data
  IsActive        Boolean  @default(true)
  CreatedAt       DateTime @default(now())
  UpdatedAt       DateTime @updatedAt
}

model aiTrainingData {
  id                 Int      @id @default(autoincrement())
  conversationId     String
  messageId          String
  userRating         Int      // 1-5 scale rating
  wasHelpful         Boolean
  improvementAreas   String[] // Areas where response could be improved
  correctResponse    String?  // Correct response if provided by user
  contextData        String   // JSON string of conversation context
  createdAt          DateTime @default(now())
  
  @@index([conversationId])
  @@index([createdAt])
}

model aiPositiveExamples {
  id              Int      @id @default(autoincrement())
  userMessage     String   // The user's message
  correctResponse String   // The correct AI response
  context         String   // JSON string of conversation context
  rating          Int      // User rating (4-5 for positive examples)
  createdAt       DateTime @default(now())
  
  @@index([rating])
  @@index([createdAt])
}

model aiPerformanceMetrics {
  id                    Int      @id @default(autoincrement())
  date                  DateTime @unique @default(now())
  totalConversations    Int      @default(0)
  averageRating         Float    @default(0.0)
  helpfulResponsesCount Int      @default(0)
  escalationRate        Float    @default(0.0) // Percentage of conversations escalated to humans
  commonFailurePoints   String[] // Common areas where AI fails
  
  @@index([date])
}

// Simplified Chat System Models (linked to orders)
model orderMessages {
  id              String            @id @default(cuid())
  orderId         Int
  senderId        Int
  messageType     OrderMessageType  @default(TEXT)
  content         String
  attachments     Json?             // File attachments, images, etc.
  createdAt       DateTime          @default(now())
  replyToId       String?           // For message replies
  
  // Relationships
  order           orders            @relation(fields: [orderId], references: [id], onDelete: Cascade)
  sender          users             @relation("SentOrderMessages", fields: [senderId], references: [id])
  replyTo         orderMessages?    @relation("OrderMessageReplies", fields: [replyToId], references: [id])
  replies         orderMessages[]   @relation("OrderMessageReplies")
  
  @@index([orderId])
  @@index([senderId])
  @@index([createdAt])
}

// Enums for Chat System
enum OrderMessageType {
  TEXT
  IMAGE
  FILE
  LOCATION
  VOICE
  SYSTEM
}

// OTP table for email verification and password reset
model emailOtps {
  id          String    @id @default(cuid())
  email       String
  otp         String
  type        OtpType   @default(PASSWORD_RESET)
  expiresAt   DateTime
  isUsed      Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  @@index([email])
  @@index([email, type])
  @@index([expiresAt])
}

enum OtpType {
  PASSWORD_RESET
  EMAIL_VERIFICATION
  TWO_FACTOR_AUTH
}

enum OrderSubmissionType {
  PROVIDER_SELECT
  AUTO_SELECT
}

// Support system model
model supportRequests {
  id                        String    @id @default(cuid())
  userId                    Int
  relatedOrderId            Int?
  issueDescription          String
  contactUserByRegisteredMobile Boolean @default(false)
  sendEmail                 Boolean   @default(false)
  status                    SupportStatus @default(OPEN)
  createdAt                 DateTime  @default(now())
  updatedAt                 DateTime  @updatedAt
  
  // Relationships
  user                      users     @relation("UserSupportRequests", fields: [userId], references: [id], onDelete: Cascade)
  relatedOrder              orders?   @relation("OrderSupportRequests", fields: [relatedOrderId], references: [id])
   
  @@index([status])
  @@index([createdAt])
}

enum SupportStatus {
  OPEN
  IN_PROGRESS
  RESOLVED
  CLOSED
}