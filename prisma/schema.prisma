generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("HEROKU_POSTGRESQL_GREEN_URL")
}

model users {
  id            Int             @id @default(autoincrement())
  UserTypeID    Int
  FirstName     String
  LastName      String
  Password      String
  Email         String          @unique
  PhoneNumber   String          @unique
  Nationality   String
  CreatedOn     DateTime        @default(now())
  ModifiedOn    DateTime        @updatedAt
  isActive      Boolean         @default(true)
  cars          cars[]
  creditCards   creditCards[]
  customer      customer?
  provider      provider?
  uploadedFiles uploadedFiles[]
  userTypes     userTypes       @relation(fields: [UserTypeID], references: [id], onDelete: Cascade)
}

model customer {
  id     Int      @id @default(autoincrement())
  UserID Int      @unique
  users  users    @relation(fields: [UserID], references: [id], onDelete: Cascade)
  orders orders[]
}

model provider {
  id               Int                @id @default(autoincrement())
  UserID           Int                @unique
  NumberOfOrders   Int                @default(0)
  orders           orders[]
  users            users              @relation(fields: [UserID], references: [id], onDelete: Cascade)
  providerServices providerServices[]
}

model additionalFees {
  id        Int      @id @default(autoincrement())
  FeeName   String   @unique
  FeePrice  Decimal  @default(0)
  CreatedOn DateTime @default(now())
}

model services {
  id                 Int                @id @default(autoincrement())
  ServiceName        String             @unique
  ServiceDescription String
  ServiceIconLink    String
  ServicePrice       Decimal            @default(0)
  IsActive           Boolean            @default(true)
  CreatedOn          DateTime           @default(now())
  ModifiedOn         DateTime           @updatedAt
  ModuleID           Int
  GradientID         Int?
  packageServices    packageServices[]
  providerServices   providerServices[]
  colorGradiants     colorGradiants?    @relation(fields: [GradientID], references: [id], onDelete: Cascade)
  modules            modules            @relation(fields: [ModuleID], references: [id], onDelete: Cascade)
}

model orders {
  id                       Int                        @id @default(autoincrement())
  PaymentMethodID          Int
  CustomerID               Int
  ProviderID               Int
  OrderTotalAmount         Float
  OrderCreatedDate         DateTime                   @default(now())
  Longitude                Float
  Latitude                 Float
  AddressString            String
  orderAmountStatements    orderAmountStatements[]
  orderCreditCardsPurchase orderCreditCardsPurchase[]
  orderHistory             orderHistory[]
  orderServices            orderServices[]
  customer                 customer                   @relation(fields: [CustomerID], references: [id], onDelete: Cascade)
  paymentMethods           paymentMethods             @relation(fields: [PaymentMethodID], references: [id], onDelete: Cascade)
  provider                 provider                   @relation(fields: [ProviderID], references: [id], onDelete: Cascade)
}

model orderServices {
  id                Int              @id @default(autoincrement())
  ProviderServiceID Int
  OrderID           Int
  CarID             Int
  CreatedOn         DateTime?        @default(now()) @db.Timestamptz(6)
  cars              cars             @relation(fields: [CarID], references: [id], onDelete: Cascade)
  orders            orders           @relation(fields: [OrderID], references: [id], onDelete: Cascade)
  providerServices  providerServices @relation(fields: [ProviderServiceID], references: [id], onDelete: Cascade, map: "orderServices_ServiceID_fkey")
}

model orderCreditCardsPurchase {
  id          Int         @id @default(autoincrement())
  CardID      Int
  OrderID     Int
  TotalAmount Float
  CreatedOn   DateTime    @default(now())
  creditCards creditCards @relation(fields: [CardID], references: [id], onDelete: Cascade)
  orders      orders      @relation(fields: [OrderID], references: [id], onDelete: Cascade)
}

model creditCards {
  id                       Int                        @id @default(autoincrement())
  UserID                   Int
  CVC                      String
  CardNumber               String
  ExpiryDate               String
  IsActive                 Boolean                    @default(true)
  CreatedOn                DateTime                   @default(now())
  users                    users                      @relation(fields: [UserID], references: [id], onDelete: Cascade)
  orderCreditCardsPurchase orderCreditCardsPurchase[]
}

model paymentMethods {
  id                Int      @id @default(autoincrement())
  MethodName        String   @unique
  MethodDescription String
  CreatedOn         DateTime @default(now())
  orders            orders[]
}

model userTypes {
  id             Int      @id @default(autoincrement())
  TypeName       String   @unique
  CreatedOn      DateTime @default(now())
  AllowedClients String[]
  users          users[]
}

model modules {
  id                Int        @id @default(autoincrement())
  ModuleName        String     @unique
  ModuleDescription String
  ModuleIconLink    String
  CreatedOn         DateTime   @default(now())
  packages          packages[]
  services          services[]
}

model providerServices {
  id            Int             @id @default(autoincrement())
  ProviderID    Int?
  ServiceID     Int?
  Pofeciency    String?
  Price         Decimal         @default(0)
  CreatedOn     String?
  Rating        Decimal         @default(0)
  orderServices orderServices[]
  orderTotalAmount orderAmountStatements[]
  provider      provider?       @relation(fields: [ProviderID], references: [id], onDelete: Cascade)
  services      services?       @relation(fields: [ServiceID], references: [id], onDelete: Cascade)
}

model packages {
  id                   Int               @id @default(autoincrement())
  ModuleID             Int
  GradiantID           Int?
  PackageName          String
  PackageDescription   String
  PackagePrice         Float
  PackageOriginalPrice Float
  PackageIconLink      String
  CreatedOn            DateTime          @default(now())
  packageServices      packageServices[]
  colorGradiants       colorGradiants?   @relation(fields: [GradiantID], references: [id], onDelete: Cascade)
  modules              modules           @relation(fields: [ModuleID], references: [id], onDelete: Cascade)
}

model bodyTypes {
  id       Int    @id @default(autoincrement())
  TypeName String @unique
  cars     cars[]
}

model cars {
  id            Int             @id @default(autoincrement())
  UserID        Int
  BodyTypeID    Int
  PlateNumber   String
  Color         String
  Manufacturer  String
  Model         String
  CreatedOn     DateTime        @default(now())
  ModifiedOn    DateTime        @updatedAt
  PlateCity     String?
  bodyTypes     bodyTypes       @relation(fields: [BodyTypeID], references: [id], onDelete: Cascade)
  users         users           @relation(fields: [UserID], references: [id], onDelete: Cascade)
  orderServices orderServices[]
}

model colorGradiants {
  id                 Int        @id @default(autoincrement())
  ColorName          String     @unique
  ColorMainText      String
  ColorSecondaryText String
  ColorStart         String
  ColorEnd           String
  packages           packages[]
  services           services[]
}

model packageServices {
  PackageID Int
  ServiceID Int
  packages  packages @relation(fields: [PackageID], references: [id], onDelete: Cascade)
  services  services @relation(fields: [ServiceID], references: [id], onDelete: Cascade)

  @@id([PackageID, ServiceID])
}

model orderHistory {
  id                Int               @id @default(autoincrement())
  OrderID           Int
  HistoryItemID     Int
  CreatedOn         DateTime          @default(now())
  orderHistoryItems orderHistoryItems @relation(fields: [HistoryItemID], references: [id], onDelete: Cascade)
  orders            orders            @relation(fields: [OrderID], references: [id], onDelete: Cascade)
}

model orderHistoryItems {
  id           Int            @id @default(autoincrement())
  HistoryName  String         @unique
  orderHistory orderHistory[]
}

model attachmentTypes {
  id          Int           @id @default(autoincrement())
  TypeName    String        @unique
  attachments attachments[]
}

model attachments {
  id             Int             @id @default(autoincrement())
  TypeID         Int
  Name           String
  Description    String
  attachmentType attachmentTypes @relation(fields: [TypeID], references: [id])
  uploadedFiles  uploadedFiles[]
}

model uploadedFiles {
  id           Int         @id @default(autoincrement())
  AttachmentID Int
  UserID       Int
  FileName     String      @unique
  AWSEtag      String?
  CreatedAt    DateTime    @default(now())
  UploadedAt   DateTime?
  JsonData     Json?
  attachment   attachments @relation(fields: [AttachmentID], references: [id])
  user         users       @relation(fields: [UserID], references: [id])
}

model constants {
  id                    Int                     @id @default(autoincrement())
  Value                 Decimal                 @default(0)
  Type                  ConstantType
  CreatedAt             DateTime                @default(now())
  UpdatedAt             DateTime                @updatedAt
  Name                  String                  @unique
  isActive              Boolean                 @default(true)
  orderAmountStatements orderAmountStatements[]
}

model orderAmountStatements {
  id                Int        @id @default(autoincrement())
  OrderID           Int
  RelatedConstantID Int?
  RelatedProviderServiceID Int?
  Name              String?
  Amount            Decimal
  CreatedAt         DateTime   @default(now())
  orders            orders     @relation(fields: [OrderID], references: [id], onDelete: NoAction, onUpdate: NoAction)
  constants         constants? @relation(fields: [RelatedConstantID], references: [id], onDelete: NoAction, onUpdate: NoAction)
  providerService   providerServices? @relation(fields: [RelatedProviderServiceID],references: [id]) 
}

enum ConstantType {
  Amount
  Percentage
  Numeric
}
